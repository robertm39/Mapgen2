# -*- coding: utf-8 -*-
"""
Created on Sun Oct 17 13:16:54 2021

@author: Robert Morton
"""

import random

import numpy as np

# Surfaces will be represented with Numpy arrays for fast math

DTYPE = np.float64

def get_random_surface_2(length, width):
    surface = np.zeros((length, width), dtype=np.int32)
    
    #Set the top
    for x in range(1, length):
        surface[x, 0] = surface[x-1, 0] + random.randint(-1, 1)

def get_random_walk(length, value=None):
    """
    Return a random walk of the given length.
    
    Parameters:
        length int:
            The length of the random walk.
        value (number) -> number:
            The value function.
    
    Return:
        A random walk of the given length using the given step function.
    """
    if value is None:
        value = lambda x: x + random.randint(-1, 1)
    
    walk = np.zeros(length, dtype=DTYPE)
    for i in range(1, length):
        walk[i] =  value(walk[i-1])
    
    return walk

def constrained_value(prev_val, parallel_val):
    lower_bound = round(max(prev_val - 1, parallel_val - 1))
    upper_bound = round(min(prev_val + 1, parallel_val + 1))
    
    # return random.uniform(lower_bound, upper_bound)
    return random.randint(lower_bound, upper_bound)

def get_parallel_random_walk(length,
                               start,
                               parallel_walk,
                               value=None):
    """
    Return a random walk restrained by a given random walk.
    
    Parameters:
        length int:
            The length of the walk.
        start number:
            The starting value of the walk.
        parallel_walk array:
            The walk to be restrained by.
        step (prev_val, parallel_val) -> number:
            The value function.
    
    Return:
        A random walk constrained by the given walk.
    """
    if value is None:
        value = constrained_value
    
    walk = np.zeros(length, dtype=DTYPE)
    walk[0] = start
    for i in range(1, length):
        walk[i] = value(walk[i-1], parallel_walk[i])
    
    return walk

def get_random_surface(length,
                         width,
                         single_value=None,
                         double_value=None):
    """
    Return a random surface generated by the given value functions.
    
    Parameters:
        length int:
            The length of the surface.
        width int:
            The width of the surface.
        single_value (number) -> number
            The value function that only takes one argument.
        double_balue (number, number) -> number:
            The value function that takes two argument.
    
    Return:
        A random surface generated by the two functions.
    """
    
    # Initialize the surface to zero
    surface = np.zeros((length, width), dtype=DTYPE)
    
    # Get the values along the x- and z-axis
    x_walk = get_random_walk(length, single_value)
    z_walk = get_random_walk(width, single_value)
    
    # Set the values along the x- and z-axis
    surface[:, 0] = x_walk
    surface[0, :] = z_walk
    
    # Fill in the values in the rest
    for i in range(1, width):
        # Fill in the values in surface[:, i]
        walk = get_parallel_random_walk(length,
                                        surface[0, i],
                                        surface[:, i-1],
                                        double_value)
        
        surface[:, i] = walk
    
    return surface